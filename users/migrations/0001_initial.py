# Generated by Django 2.2.2 on 2021-07-01 08:36

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Top',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=60, null=True)),
                ('active', models.BooleanField(default=False)),
                ('user_id', models.CharField(max_length=20)),
                ('mobile', models.CharField(max_length=15)),
                ('rank', models.IntegerField(default=500)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=255, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('mobile', models.CharField(blank=True, max_length=255)),
                ('referal', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('cash_back', models.FloatField(default=0)),
                ('income', models.FloatField(default=0)),
                ('secondary_cashback', models.FloatField(default=0)),
                ('left_side_business', models.FloatField(blank=True, default=0)),
                ('total_users_left', models.FloatField(blank=True, default=0)),
                ('right_side_business', models.FloatField(blank=True, default=0)),
                ('total_users_right', models.FloatField(blank=True, default=0)),
                ('left_pending', models.FloatField(blank=True, default=0)),
                ('right_pending', models.FloatField(blank=True, default=0)),
                ('binary_income', models.FloatField(default=0)),
                ('today_binary_income', models.FloatField(default=0)),
                ('binary_rewards_level', models.FloatField(blank=True, default=0)),
                ('added_amount', models.FloatField(default=0)),
                ('received_amount', models.FloatField(default=0)),
                ('is_superuser', models.BooleanField(blank=True, default=False)),
                ('total_income', models.FloatField(blank=True, default=0)),
                ('app_wallet', models.FloatField(blank=True, default=0)),
                ('total_app_income', models.FloatField(blank=True, default=0)),
                ('rank', models.CharField(blank=True, max_length=44, null=True)),
                ('nominee', models.CharField(default='blank', max_length=155)),
                ('nominee_relation', models.CharField(default='blank', max_length=155)),
                ('imps_daily', models.FloatField(blank=True, default=0)),
                ('recharge_limit', models.IntegerField(blank=True, default=0)),
                ('recharge_limit_used', models.IntegerField(blank=True, default=0)),
                ('login_bonus', models.BooleanField(blank=True, default=False)),
                ('redeem_access', models.BooleanField(blank=True, default=False)),
                ('service_access', models.BooleanField(blank=True, default=False)),
                ('new_funds', models.FloatField(blank=True, default=0)),
                ('royalty', models.IntegerField(blank=True, default=0)),
                ('app_temp', models.FloatField(blank=True, default=0)),
                ('tasks_done', models.IntegerField(blank=True, default=0)),
                ('app_directs', models.IntegerField(blank=True, default=0)),
                ('all_wallets', models.IntegerField(blank=True, default=0)),
                ('binary_directs', models.IntegerField(blank=True, default=0)),
                ('shopping_wallet', models.FloatField(blank=True, default=0, null=True)),
                ('profile_pic', models.FileField(null=True, upload_to='profile_pics/')),
                ('otp', models.IntegerField(default='1234', null=True)),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'user'), (2, 'vendor'), (3, 'secretary'), (4, 'supervisor'), (5, 'admin')], null=True)),
                ('auto_neft', models.BooleanField(default=False)),
                ('friends', models.ManyToManyField(blank=True, related_name='user_friends', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
